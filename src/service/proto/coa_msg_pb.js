// source: coa_msg.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function () { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.EntityType', null, global);
goog.exportSymbol('proto.MessageType', null, global);
goog.exportSymbol('proto.ack_coa_classify', null, global);
goog.exportSymbol('proto.ack_coa_eva', null, global);
goog.exportSymbol('proto.ack_coa_list', null, global);
goog.exportSymbol('proto.ack_coa_net', null, global);
goog.exportSymbol('proto.ack_coa_opt', null, global);
goog.exportSymbol('proto.ack_equipmodel_info_all', null, global);
goog.exportSymbol('proto.ack_equipmodel_info_single', null, global);
goog.exportSymbol('proto.ack_task_done', null, global);
goog.exportSymbol('proto.action_info', null, global);
goog.exportSymbol('proto.action_serial', null, global);
goog.exportSymbol('proto.db_general_row', null, global);
goog.exportSymbol('proto.db_general_table', null, global);
goog.exportSymbol('proto.entity_statistic', null, global);
goog.exportSymbol('proto.equipment_info', null, global);
goog.exportSymbol('proto.equipmodel_extent_info', null, global);
goog.exportSymbol('proto.main_packet', null, global);
goog.exportSymbol('proto.node_info', null, global);
goog.exportSymbol('proto.pc_entity_register', null, global);
goog.exportSymbol('proto.pc_heart_beat', null, global);
goog.exportSymbol('proto.pc_id_start', null, global);
goog.exportSymbol('proto.pc_id_table', null, global);
goog.exportSymbol('proto.pc_logon_asw', null, global);
goog.exportSymbol('proto.pc_logon_request', null, global);
goog.exportSymbol('proto.pc_nodes_managed', null, global);
goog.exportSymbol('proto.pc_subscribe_update', null, global);
goog.exportSymbol('proto.pc_topology_update', null, global);
goog.exportSymbol('proto.position', null, global);
goog.exportSymbol('proto.req_coa_classify', null, global);
goog.exportSymbol('proto.req_coa_eva', null, global);
goog.exportSymbol('proto.req_coa_list', null, global);
goog.exportSymbol('proto.req_coa_net', null, global);
goog.exportSymbol('proto.req_coa_opt', null, global);
goog.exportSymbol('proto.req_db_general', null, global);
goog.exportSymbol('proto.req_equipmodel_exinfo_delete', null, global);
goog.exportSymbol('proto.req_equipmodel_exinfo_insert', null, global);
goog.exportSymbol('proto.req_equipmodel_info_delete', null, global);
goog.exportSymbol('proto.req_equipmodel_info_single', null, global);
goog.exportSymbol('proto.req_equipmodel_info_update', null, global);
goog.exportSymbol('proto.req_opt_coa', null, global);
goog.exportSymbol('proto.req_task_info', null, global);
goog.exportSymbol('proto.req_task_info_doc', null, global);
goog.exportSymbol('proto.tst_positions', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.req_equipmodel_info_update = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.req_equipmodel_info_update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.req_equipmodel_info_update.displayName = 'proto.req_equipmodel_info_update';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.req_equipmodel_info_delete = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.req_equipmodel_info_delete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.req_equipmodel_info_delete.displayName = 'proto.req_equipmodel_info_delete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.req_equipmodel_exinfo_insert = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.req_equipmodel_exinfo_insert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.req_equipmodel_exinfo_insert.displayName = 'proto.req_equipmodel_exinfo_insert';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.req_equipmodel_exinfo_delete = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.req_equipmodel_exinfo_delete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.req_equipmodel_exinfo_delete.displayName = 'proto.req_equipmodel_exinfo_delete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ack_equipmodel_info_all = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ack_equipmodel_info_all.repeatedFields_, null);
};
goog.inherits(proto.ack_equipmodel_info_all, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ack_equipmodel_info_all.displayName = 'proto.ack_equipmodel_info_all';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.req_equipmodel_info_single = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.req_equipmodel_info_single, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.req_equipmodel_info_single.displayName = 'proto.req_equipmodel_info_single';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ack_equipmodel_info_single = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ack_equipmodel_info_single.repeatedFields_, null);
};
goog.inherits(proto.ack_equipmodel_info_single, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ack_equipmodel_info_single.displayName = 'proto.ack_equipmodel_info_single';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.equipmodel_extent_info = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.equipmodel_extent_info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.equipmodel_extent_info.displayName = 'proto.equipmodel_extent_info';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main_packet = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main_packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.main_packet.displayName = 'proto.main_packet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.req_task_info = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.req_task_info.repeatedFields_, null);
};
goog.inherits(proto.req_task_info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.req_task_info.displayName = 'proto.req_task_info';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.req_task_info_doc = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.req_task_info_doc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.req_task_info_doc.displayName = 'proto.req_task_info_doc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ack_task_done = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ack_task_done, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ack_task_done.displayName = 'proto.ack_task_done';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.req_coa_list = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.req_coa_list, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.req_coa_list.displayName = 'proto.req_coa_list';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ack_coa_list = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ack_coa_list.repeatedFields_, null);
};
goog.inherits(proto.ack_coa_list, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ack_coa_list.displayName = 'proto.ack_coa_list';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.req_opt_coa = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.req_opt_coa, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.req_opt_coa.displayName = 'proto.req_opt_coa';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.req_coa_net = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.req_coa_net, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.req_coa_net.displayName = 'proto.req_coa_net';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ack_coa_net = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ack_coa_net.repeatedFields_, null);
};
goog.inherits(proto.ack_coa_net, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ack_coa_net.displayName = 'proto.ack_coa_net';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.req_coa_eva = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.req_coa_eva, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.req_coa_eva.displayName = 'proto.req_coa_eva';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ack_coa_eva = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ack_coa_eva, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ack_coa_eva.displayName = 'proto.ack_coa_eva';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.req_coa_classify = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.req_coa_classify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.req_coa_classify.displayName = 'proto.req_coa_classify';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ack_coa_classify = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ack_coa_classify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ack_coa_classify.displayName = 'proto.ack_coa_classify';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.req_coa_opt = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.req_coa_opt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.req_coa_opt.displayName = 'proto.req_coa_opt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ack_coa_opt = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ack_coa_opt.repeatedFields_, null);
};
goog.inherits(proto.ack_coa_opt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ack_coa_opt.displayName = 'proto.ack_coa_opt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pc_heart_beat = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pc_heart_beat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pc_heart_beat.displayName = 'proto.pc_heart_beat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db_general_table = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.db_general_table.repeatedFields_, null);
};
goog.inherits(proto.db_general_table, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.db_general_table.displayName = 'proto.db_general_table';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db_general_row = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.db_general_row.repeatedFields_, null);
};
goog.inherits(proto.db_general_row, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.db_general_row.displayName = 'proto.db_general_row';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.req_db_general = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.req_db_general, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.req_db_general.displayName = 'proto.req_db_general';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.equipment_info = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.equipment_info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.equipment_info.displayName = 'proto.equipment_info';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.action_info = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.action_info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.action_info.displayName = 'proto.action_info';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.action_serial = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.action_serial, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.action_serial.displayName = 'proto.action_serial';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.position = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.position.displayName = 'proto.position';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pc_id_start = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pc_id_start, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pc_id_start.displayName = 'proto.pc_id_start';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pc_id_table = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pc_id_table.repeatedFields_, null);
};
goog.inherits(proto.pc_id_table, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pc_id_table.displayName = 'proto.pc_id_table';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pc_nodes_managed = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pc_nodes_managed.repeatedFields_, null);
};
goog.inherits(proto.pc_nodes_managed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pc_nodes_managed.displayName = 'proto.pc_nodes_managed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pc_entity_register = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pc_entity_register, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pc_entity_register.displayName = 'proto.pc_entity_register';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pc_subscribe_update = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pc_subscribe_update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pc_subscribe_update.displayName = 'proto.pc_subscribe_update';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pc_topology_update = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pc_topology_update.repeatedFields_, null);
};
goog.inherits(proto.pc_topology_update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pc_topology_update.displayName = 'proto.pc_topology_update';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pc_logon_request = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pc_logon_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pc_logon_request.displayName = 'proto.pc_logon_request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pc_logon_asw = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pc_logon_asw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pc_logon_asw.displayName = 'proto.pc_logon_asw';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity_statistic = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entity_statistic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.entity_statistic.displayName = 'proto.entity_statistic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.node_info = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.node_info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.node_info.displayName = 'proto.node_info';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tst_positions = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tst_positions.repeatedFields_, null);
};
goog.inherits(proto.tst_positions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tst_positions.displayName = 'proto.tst_positions';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.req_equipmodel_info_update.prototype.toObject = function (opt_includeInstance) {
    return proto.req_equipmodel_info_update.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.req_equipmodel_info_update} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.req_equipmodel_info_update.toObject = function (includeInstance, msg) {
    var f, obj = {
      equipModelId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      typeId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      area: jspb.Message.getFieldWithDefault(msg, 3, ""),
      name: jspb.Message.getFieldWithDefault(msg, 4, ""),
      length: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
      width: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
      height: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
      speedEva: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
      speedMax: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
      speedMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.req_equipmodel_info_update}
 */
proto.req_equipmodel_info_update.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.req_equipmodel_info_update;
  return proto.req_equipmodel_info_update.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.req_equipmodel_info_update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.req_equipmodel_info_update}
 */
proto.req_equipmodel_info_update.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setEquipModelId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTypeId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setArea(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setLength(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setWidth(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setHeight(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setSpeedEva(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setSpeedMax(value);
        break;
      case 10:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setSpeedMin(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.req_equipmodel_info_update.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.req_equipmodel_info_update.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.req_equipmodel_info_update} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.req_equipmodel_info_update.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEquipModelId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTypeId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getArea();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLength();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getSpeedEva();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getSpeedMax();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getSpeedMin();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
};


/**
 * optional uint32 equip_model_id = 1;
 * @return {number}
 */
proto.req_equipmodel_info_update.prototype.getEquipModelId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_equipmodel_info_update} returns this
 */
proto.req_equipmodel_info_update.prototype.setEquipModelId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 type_id = 2;
 * @return {number}
 */
proto.req_equipmodel_info_update.prototype.getTypeId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_equipmodel_info_update} returns this
 */
proto.req_equipmodel_info_update.prototype.setTypeId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string area = 3;
 * @return {string}
 */
proto.req_equipmodel_info_update.prototype.getArea = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.req_equipmodel_info_update} returns this
 */
proto.req_equipmodel_info_update.prototype.setArea = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.req_equipmodel_info_update.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.req_equipmodel_info_update} returns this
 */
proto.req_equipmodel_info_update.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double length = 5;
 * @return {number}
 */
proto.req_equipmodel_info_update.prototype.getLength = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.req_equipmodel_info_update} returns this
 */
proto.req_equipmodel_info_update.prototype.setLength = function (value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double width = 6;
 * @return {number}
 */
proto.req_equipmodel_info_update.prototype.getWidth = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.req_equipmodel_info_update} returns this
 */
proto.req_equipmodel_info_update.prototype.setWidth = function (value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double height = 7;
 * @return {number}
 */
proto.req_equipmodel_info_update.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.req_equipmodel_info_update} returns this
 */
proto.req_equipmodel_info_update.prototype.setHeight = function (value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double speed_eva = 8;
 * @return {number}
 */
proto.req_equipmodel_info_update.prototype.getSpeedEva = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.req_equipmodel_info_update} returns this
 */
proto.req_equipmodel_info_update.prototype.setSpeedEva = function (value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double speed_max = 9;
 * @return {number}
 */
proto.req_equipmodel_info_update.prototype.getSpeedMax = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.req_equipmodel_info_update} returns this
 */
proto.req_equipmodel_info_update.prototype.setSpeedMax = function (value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double speed_min = 10;
 * @return {number}
 */
proto.req_equipmodel_info_update.prototype.getSpeedMin = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.req_equipmodel_info_update} returns this
 */
proto.req_equipmodel_info_update.prototype.setSpeedMin = function (value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.req_equipmodel_info_delete.prototype.toObject = function (opt_includeInstance) {
    return proto.req_equipmodel_info_delete.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.req_equipmodel_info_delete} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.req_equipmodel_info_delete.toObject = function (includeInstance, msg) {
    var f, obj = {
      equipModelId: jspb.Message.getFieldWithDefault(msg, 1, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.req_equipmodel_info_delete}
 */
proto.req_equipmodel_info_delete.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.req_equipmodel_info_delete;
  return proto.req_equipmodel_info_delete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.req_equipmodel_info_delete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.req_equipmodel_info_delete}
 */
proto.req_equipmodel_info_delete.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setEquipModelId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.req_equipmodel_info_delete.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.req_equipmodel_info_delete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.req_equipmodel_info_delete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.req_equipmodel_info_delete.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEquipModelId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 equip_model_id = 1;
 * @return {number}
 */
proto.req_equipmodel_info_delete.prototype.getEquipModelId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_equipmodel_info_delete} returns this
 */
proto.req_equipmodel_info_delete.prototype.setEquipModelId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.req_equipmodel_exinfo_insert.prototype.toObject = function (opt_includeInstance) {
    return proto.req_equipmodel_exinfo_insert.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.req_equipmodel_exinfo_insert} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.req_equipmodel_exinfo_insert.toObject = function (includeInstance, msg) {
    var f, obj = {
      equipModelId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      extentInfo: (f = msg.getExtentInfo()) && proto.equipmodel_extent_info.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.req_equipmodel_exinfo_insert}
 */
proto.req_equipmodel_exinfo_insert.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.req_equipmodel_exinfo_insert;
  return proto.req_equipmodel_exinfo_insert.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.req_equipmodel_exinfo_insert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.req_equipmodel_exinfo_insert}
 */
proto.req_equipmodel_exinfo_insert.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setEquipModelId(value);
        break;
      case 2:
        var value = new proto.equipmodel_extent_info;
        reader.readMessage(value, proto.equipmodel_extent_info.deserializeBinaryFromReader);
        msg.setExtentInfo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.req_equipmodel_exinfo_insert.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.req_equipmodel_exinfo_insert.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.req_equipmodel_exinfo_insert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.req_equipmodel_exinfo_insert.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEquipModelId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getExtentInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.equipmodel_extent_info.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 equip_model_id = 1;
 * @return {number}
 */
proto.req_equipmodel_exinfo_insert.prototype.getEquipModelId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_equipmodel_exinfo_insert} returns this
 */
proto.req_equipmodel_exinfo_insert.prototype.setEquipModelId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional equipmodel_extent_info extent_info = 2;
 * @return {?proto.equipmodel_extent_info}
 */
proto.req_equipmodel_exinfo_insert.prototype.getExtentInfo = function () {
  return /** @type{?proto.equipmodel_extent_info} */ (
    jspb.Message.getWrapperField(this, proto.equipmodel_extent_info, 2));
};


/**
 * @param {?proto.equipmodel_extent_info|undefined} value
 * @return {!proto.req_equipmodel_exinfo_insert} returns this
*/
proto.req_equipmodel_exinfo_insert.prototype.setExtentInfo = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.req_equipmodel_exinfo_insert} returns this
 */
proto.req_equipmodel_exinfo_insert.prototype.clearExtentInfo = function () {
  return this.setExtentInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.req_equipmodel_exinfo_insert.prototype.hasExtentInfo = function () {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.req_equipmodel_exinfo_delete.prototype.toObject = function (opt_includeInstance) {
    return proto.req_equipmodel_exinfo_delete.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.req_equipmodel_exinfo_delete} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.req_equipmodel_exinfo_delete.toObject = function (includeInstance, msg) {
    var f, obj = {
      propertyId: jspb.Message.getFieldWithDefault(msg, 1, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.req_equipmodel_exinfo_delete}
 */
proto.req_equipmodel_exinfo_delete.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.req_equipmodel_exinfo_delete;
  return proto.req_equipmodel_exinfo_delete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.req_equipmodel_exinfo_delete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.req_equipmodel_exinfo_delete}
 */
proto.req_equipmodel_exinfo_delete.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setPropertyId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.req_equipmodel_exinfo_delete.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.req_equipmodel_exinfo_delete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.req_equipmodel_exinfo_delete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.req_equipmodel_exinfo_delete.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPropertyId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 property_id = 1;
 * @return {number}
 */
proto.req_equipmodel_exinfo_delete.prototype.getPropertyId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_equipmodel_exinfo_delete} returns this
 */
proto.req_equipmodel_exinfo_delete.prototype.setPropertyId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ack_equipmodel_info_all.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ack_equipmodel_info_all.prototype.toObject = function (opt_includeInstance) {
    return proto.ack_equipmodel_info_all.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ack_equipmodel_info_all} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ack_equipmodel_info_all.toObject = function (includeInstance, msg) {
    var f, obj = {
      infoAllList: jspb.Message.toObjectList(msg.getInfoAllList(),
        proto.ack_equipmodel_info_single.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ack_equipmodel_info_all}
 */
proto.ack_equipmodel_info_all.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ack_equipmodel_info_all;
  return proto.ack_equipmodel_info_all.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ack_equipmodel_info_all} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ack_equipmodel_info_all}
 */
proto.ack_equipmodel_info_all.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.ack_equipmodel_info_single;
        reader.readMessage(value, proto.ack_equipmodel_info_single.deserializeBinaryFromReader);
        msg.addInfoAll(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ack_equipmodel_info_all.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.ack_equipmodel_info_all.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ack_equipmodel_info_all} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ack_equipmodel_info_all.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getInfoAllList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ack_equipmodel_info_single.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ack_equipmodel_info_single info_all = 1;
 * @return {!Array<!proto.ack_equipmodel_info_single>}
 */
proto.ack_equipmodel_info_all.prototype.getInfoAllList = function () {
  return /** @type{!Array<!proto.ack_equipmodel_info_single>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ack_equipmodel_info_single, 1));
};


/**
 * @param {!Array<!proto.ack_equipmodel_info_single>} value
 * @return {!proto.ack_equipmodel_info_all} returns this
*/
proto.ack_equipmodel_info_all.prototype.setInfoAllList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ack_equipmodel_info_single=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ack_equipmodel_info_single}
 */
proto.ack_equipmodel_info_all.prototype.addInfoAll = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ack_equipmodel_info_single, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ack_equipmodel_info_all} returns this
 */
proto.ack_equipmodel_info_all.prototype.clearInfoAllList = function () {
  return this.setInfoAllList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.req_equipmodel_info_single.prototype.toObject = function (opt_includeInstance) {
    return proto.req_equipmodel_info_single.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.req_equipmodel_info_single} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.req_equipmodel_info_single.toObject = function (includeInstance, msg) {
    var f, obj = {
      equipModelId: jspb.Message.getFieldWithDefault(msg, 1, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.req_equipmodel_info_single}
 */
proto.req_equipmodel_info_single.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.req_equipmodel_info_single;
  return proto.req_equipmodel_info_single.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.req_equipmodel_info_single} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.req_equipmodel_info_single}
 */
proto.req_equipmodel_info_single.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setEquipModelId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.req_equipmodel_info_single.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.req_equipmodel_info_single.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.req_equipmodel_info_single} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.req_equipmodel_info_single.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEquipModelId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 equip_model_id = 1;
 * @return {number}
 */
proto.req_equipmodel_info_single.prototype.getEquipModelId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_equipmodel_info_single} returns this
 */
proto.req_equipmodel_info_single.prototype.setEquipModelId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ack_equipmodel_info_single.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ack_equipmodel_info_single.prototype.toObject = function (opt_includeInstance) {
    return proto.ack_equipmodel_info_single.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ack_equipmodel_info_single} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ack_equipmodel_info_single.toObject = function (includeInstance, msg) {
    var f, obj = {
      equipModelId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      typeId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      area: jspb.Message.getFieldWithDefault(msg, 3, ""),
      name: jspb.Message.getFieldWithDefault(msg, 4, ""),
      length: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
      width: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
      height: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
      speedEva: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
      speedMax: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
      speedMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
      extentInfoList: jspb.Message.toObjectList(msg.getExtentInfoList(),
        proto.equipmodel_extent_info.toObject, includeInstance),
      typeName: jspb.Message.getFieldWithDefault(msg, 12, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ack_equipmodel_info_single}
 */
proto.ack_equipmodel_info_single.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ack_equipmodel_info_single;
  return proto.ack_equipmodel_info_single.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ack_equipmodel_info_single} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ack_equipmodel_info_single}
 */
proto.ack_equipmodel_info_single.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setEquipModelId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTypeId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setArea(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setLength(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setWidth(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setHeight(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setSpeedEva(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setSpeedMax(value);
        break;
      case 10:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setSpeedMin(value);
        break;
      case 11:
        var value = new proto.equipmodel_extent_info;
        reader.readMessage(value, proto.equipmodel_extent_info.deserializeBinaryFromReader);
        msg.addExtentInfo(value);
        break;
      case 12:
        var value = /** @type {string} */ (reader.readString());
        msg.setTypeName(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ack_equipmodel_info_single.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.ack_equipmodel_info_single.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ack_equipmodel_info_single} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ack_equipmodel_info_single.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEquipModelId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTypeId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getArea();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLength();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getSpeedEva();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getSpeedMax();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getSpeedMin();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getExtentInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.equipmodel_extent_info.serializeBinaryToWriter
    );
  }
  f = message.getTypeName();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional uint32 equip_model_id = 1;
 * @return {number}
 */
proto.ack_equipmodel_info_single.prototype.getEquipModelId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ack_equipmodel_info_single} returns this
 */
proto.ack_equipmodel_info_single.prototype.setEquipModelId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 type_id = 2;
 * @return {number}
 */
proto.ack_equipmodel_info_single.prototype.getTypeId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ack_equipmodel_info_single} returns this
 */
proto.ack_equipmodel_info_single.prototype.setTypeId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string area = 3;
 * @return {string}
 */
proto.ack_equipmodel_info_single.prototype.getArea = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ack_equipmodel_info_single} returns this
 */
proto.ack_equipmodel_info_single.prototype.setArea = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.ack_equipmodel_info_single.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ack_equipmodel_info_single} returns this
 */
proto.ack_equipmodel_info_single.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double length = 5;
 * @return {number}
 */
proto.ack_equipmodel_info_single.prototype.getLength = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ack_equipmodel_info_single} returns this
 */
proto.ack_equipmodel_info_single.prototype.setLength = function (value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double width = 6;
 * @return {number}
 */
proto.ack_equipmodel_info_single.prototype.getWidth = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ack_equipmodel_info_single} returns this
 */
proto.ack_equipmodel_info_single.prototype.setWidth = function (value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double height = 7;
 * @return {number}
 */
proto.ack_equipmodel_info_single.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ack_equipmodel_info_single} returns this
 */
proto.ack_equipmodel_info_single.prototype.setHeight = function (value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double speed_eva = 8;
 * @return {number}
 */
proto.ack_equipmodel_info_single.prototype.getSpeedEva = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ack_equipmodel_info_single} returns this
 */
proto.ack_equipmodel_info_single.prototype.setSpeedEva = function (value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double speed_max = 9;
 * @return {number}
 */
proto.ack_equipmodel_info_single.prototype.getSpeedMax = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ack_equipmodel_info_single} returns this
 */
proto.ack_equipmodel_info_single.prototype.setSpeedMax = function (value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double speed_min = 10;
 * @return {number}
 */
proto.ack_equipmodel_info_single.prototype.getSpeedMin = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ack_equipmodel_info_single} returns this
 */
proto.ack_equipmodel_info_single.prototype.setSpeedMin = function (value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * repeated equipmodel_extent_info extent_info = 11;
 * @return {!Array<!proto.equipmodel_extent_info>}
 */
proto.ack_equipmodel_info_single.prototype.getExtentInfoList = function () {
  return /** @type{!Array<!proto.equipmodel_extent_info>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.equipmodel_extent_info, 11));
};


/**
 * @param {!Array<!proto.equipmodel_extent_info>} value
 * @return {!proto.ack_equipmodel_info_single} returns this
*/
proto.ack_equipmodel_info_single.prototype.setExtentInfoList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.equipmodel_extent_info=} opt_value
 * @param {number=} opt_index
 * @return {!proto.equipmodel_extent_info}
 */
proto.ack_equipmodel_info_single.prototype.addExtentInfo = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.equipmodel_extent_info, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ack_equipmodel_info_single} returns this
 */
proto.ack_equipmodel_info_single.prototype.clearExtentInfoList = function () {
  return this.setExtentInfoList([]);
};


/**
 * optional string type_name = 12;
 * @return {string}
 */
proto.ack_equipmodel_info_single.prototype.getTypeName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.ack_equipmodel_info_single} returns this
 */
proto.ack_equipmodel_info_single.prototype.setTypeName = function (value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.equipmodel_extent_info.prototype.toObject = function (opt_includeInstance) {
    return proto.equipmodel_extent_info.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.equipmodel_extent_info} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.equipmodel_extent_info.toObject = function (includeInstance, msg) {
    var f, obj = {
      propertyId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      propertyName: jspb.Message.getFieldWithDefault(msg, 2, ""),
      propertyMeasure: jspb.Message.getFieldWithDefault(msg, 3, ""),
      evaValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
      maxValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
      minValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.equipmodel_extent_info}
 */
proto.equipmodel_extent_info.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.equipmodel_extent_info;
  return proto.equipmodel_extent_info.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.equipmodel_extent_info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.equipmodel_extent_info}
 */
proto.equipmodel_extent_info.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setPropertyId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPropertyName(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setPropertyMeasure(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setEvaValue(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setMaxValue(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setMinValue(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.equipmodel_extent_info.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.equipmodel_extent_info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.equipmodel_extent_info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.equipmodel_extent_info.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPropertyId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPropertyName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPropertyMeasure();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEvaValue();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getMaxValue();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getMinValue();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional uint32 property_id = 1;
 * @return {number}
 */
proto.equipmodel_extent_info.prototype.getPropertyId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.equipmodel_extent_info} returns this
 */
proto.equipmodel_extent_info.prototype.setPropertyId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string property_name = 2;
 * @return {string}
 */
proto.equipmodel_extent_info.prototype.getPropertyName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.equipmodel_extent_info} returns this
 */
proto.equipmodel_extent_info.prototype.setPropertyName = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string property_measure = 3;
 * @return {string}
 */
proto.equipmodel_extent_info.prototype.getPropertyMeasure = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.equipmodel_extent_info} returns this
 */
proto.equipmodel_extent_info.prototype.setPropertyMeasure = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double eva_value = 4;
 * @return {number}
 */
proto.equipmodel_extent_info.prototype.getEvaValue = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.equipmodel_extent_info} returns this
 */
proto.equipmodel_extent_info.prototype.setEvaValue = function (value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double max_value = 5;
 * @return {number}
 */
proto.equipmodel_extent_info.prototype.getMaxValue = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.equipmodel_extent_info} returns this
 */
proto.equipmodel_extent_info.prototype.setMaxValue = function (value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double min_value = 6;
 * @return {number}
 */
proto.equipmodel_extent_info.prototype.getMinValue = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.equipmodel_extent_info} returns this
 */
proto.equipmodel_extent_info.prototype.setMinValue = function (value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.main_packet.prototype.toObject = function (opt_includeInstance) {
    return proto.main_packet.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.main_packet} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.main_packet.toObject = function (includeInstance, msg) {
    var f, obj = {
      accessPointId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      originEntityType: jspb.Message.getFieldWithDefault(msg, 2, 0),
      originEntityId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      messageType: jspb.Message.getFieldWithDefault(msg, 4, 0),
      destEntityId: jspb.Message.getFieldWithDefault(msg, 5, 0),
      time: jspb.Message.getFieldWithDefault(msg, 6, 0),
      token: msg.getToken_asB64(),
      content: msg.getContent_asB64(),
      check: msg.getCheck_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main_packet}
 */
proto.main_packet.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main_packet;
  return proto.main_packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main_packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main_packet}
 */
proto.main_packet.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setAccessPointId(value);
        break;
      case 2:
        var value = /** @type {!proto.EntityType} */ (reader.readEnum());
        msg.setOriginEntityType(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setOriginEntityId(value);
        break;
      case 4:
        var value = /** @type {!proto.MessageType} */ (reader.readEnum());
        msg.setMessageType(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setDestEntityId(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTime(value);
        break;
      case 7:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setToken(value);
        break;
      case 8:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setContent(value);
        break;
      case 9:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setCheck(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main_packet.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.main_packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main_packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.main_packet.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAccessPointId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getOriginEntityType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getOriginEntityId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMessageType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getDestEntityId();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getToken_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getCheck_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * optional uint32 access_point_id = 1;
 * @return {number}
 */
proto.main_packet.prototype.getAccessPointId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.main_packet} returns this
 */
proto.main_packet.prototype.setAccessPointId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional EntityType origin_entity_type = 2;
 * @return {!proto.EntityType}
 */
proto.main_packet.prototype.getOriginEntityType = function () {
  return /** @type {!proto.EntityType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.EntityType} value
 * @return {!proto.main_packet} returns this
 */
proto.main_packet.prototype.setOriginEntityType = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 origin_entity_id = 3;
 * @return {number}
 */
proto.main_packet.prototype.getOriginEntityId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.main_packet} returns this
 */
proto.main_packet.prototype.setOriginEntityId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional MessageType message_type = 4;
 * @return {!proto.MessageType}
 */
proto.main_packet.prototype.getMessageType = function () {
  return /** @type {!proto.MessageType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.MessageType} value
 * @return {!proto.main_packet} returns this
 */
proto.main_packet.prototype.setMessageType = function (value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional uint32 dest_entity_id = 5;
 * @return {number}
 */
proto.main_packet.prototype.getDestEntityId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.main_packet} returns this
 */
proto.main_packet.prototype.setDestEntityId = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 time = 6;
 * @return {number}
 */
proto.main_packet.prototype.getTime = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.main_packet} returns this
 */
proto.main_packet.prototype.setTime = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes token = 7;
 * @return {!(string|Uint8Array)}
 */
proto.main_packet.prototype.getToken = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes token = 7;
 * This is a type-conversion wrapper around `getToken()`
 * @return {string}
 */
proto.main_packet.prototype.getToken_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getToken()));
};


/**
 * optional bytes token = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToken()`
 * @return {!Uint8Array}
 */
proto.main_packet.prototype.getToken_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getToken()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.main_packet} returns this
 */
proto.main_packet.prototype.setToken = function (value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes content = 8;
 * @return {!(string|Uint8Array)}
 */
proto.main_packet.prototype.getContent = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes content = 8;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.main_packet.prototype.getContent_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getContent()));
};


/**
 * optional bytes content = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.main_packet.prototype.getContent_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.main_packet} returns this
 */
proto.main_packet.prototype.setContent = function (value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes check = 9;
 * @return {!(string|Uint8Array)}
 */
proto.main_packet.prototype.getCheck = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes check = 9;
 * This is a type-conversion wrapper around `getCheck()`
 * @return {string}
 */
proto.main_packet.prototype.getCheck_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getCheck()));
};


/**
 * optional bytes check = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCheck()`
 * @return {!Uint8Array}
 */
proto.main_packet.prototype.getCheck_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getCheck()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.main_packet} returns this
 */
proto.main_packet.prototype.setCheck = function (value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.req_task_info.repeatedFields_ = [7, 8, 9];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.req_task_info.prototype.toObject = function (opt_includeInstance) {
    return proto.req_task_info.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.req_task_info} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.req_task_info.toObject = function (includeInstance, msg) {
    var f, obj = {
      taskName: jspb.Message.getFieldWithDefault(msg, 1, ""),
      taskConstructTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
      taskMissionId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      taskWaveScale: jspb.Message.getFieldWithDefault(msg, 4, 0),
      taskTideType: jspb.Message.getFieldWithDefault(msg, 5, 0),
      taskAreaType: jspb.Message.getFieldWithDefault(msg, 6, 0),
      taskAreaInfoList: jspb.Message.toObjectList(msg.getTaskAreaInfoList(),
        proto.position.toObject, includeInstance),
      equipmentsOurList: jspb.Message.toObjectList(msg.getEquipmentsOurList(),
        proto.equipment_info.toObject, includeInstance),
      equipmentsEnemyList: jspb.Message.toObjectList(msg.getEquipmentsEnemyList(),
        proto.equipment_info.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.req_task_info}
 */
proto.req_task_info.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.req_task_info;
  return proto.req_task_info.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.req_task_info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.req_task_info}
 */
proto.req_task_info.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTaskName(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTaskConstructTime(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTaskMissionId(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTaskWaveScale(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTaskTideType(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTaskAreaType(value);
        break;
      case 7:
        var value = new proto.position;
        reader.readMessage(value, proto.position.deserializeBinaryFromReader);
        msg.addTaskAreaInfo(value);
        break;
      case 8:
        var value = new proto.equipment_info;
        reader.readMessage(value, proto.equipment_info.deserializeBinaryFromReader);
        msg.addEquipmentsOur(value);
        break;
      case 9:
        var value = new proto.equipment_info;
        reader.readMessage(value, proto.equipment_info.deserializeBinaryFromReader);
        msg.addEquipmentsEnemy(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.req_task_info.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.req_task_info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.req_task_info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.req_task_info.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTaskName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTaskConstructTime();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTaskMissionId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTaskWaveScale();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTaskTideType();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getTaskAreaType();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getTaskAreaInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.position.serializeBinaryToWriter
    );
  }
  f = message.getEquipmentsOurList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.equipment_info.serializeBinaryToWriter
    );
  }
  f = message.getEquipmentsEnemyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.equipment_info.serializeBinaryToWriter
    );
  }
};


/**
 * optional string task_name = 1;
 * @return {string}
 */
proto.req_task_info.prototype.getTaskName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.req_task_info} returns this
 */
proto.req_task_info.prototype.setTaskName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 task_construct_time = 2;
 * @return {number}
 */
proto.req_task_info.prototype.getTaskConstructTime = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_task_info} returns this
 */
proto.req_task_info.prototype.setTaskConstructTime = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 task_mission_id = 3;
 * @return {number}
 */
proto.req_task_info.prototype.getTaskMissionId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_task_info} returns this
 */
proto.req_task_info.prototype.setTaskMissionId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 task_wave_scale = 4;
 * @return {number}
 */
proto.req_task_info.prototype.getTaskWaveScale = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_task_info} returns this
 */
proto.req_task_info.prototype.setTaskWaveScale = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 task_tide_type = 5;
 * @return {number}
 */
proto.req_task_info.prototype.getTaskTideType = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_task_info} returns this
 */
proto.req_task_info.prototype.setTaskTideType = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 task_area_type = 6;
 * @return {number}
 */
proto.req_task_info.prototype.getTaskAreaType = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_task_info} returns this
 */
proto.req_task_info.prototype.setTaskAreaType = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated position task_area_info = 7;
 * @return {!Array<!proto.position>}
 */
proto.req_task_info.prototype.getTaskAreaInfoList = function () {
  return /** @type{!Array<!proto.position>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.position, 7));
};


/**
 * @param {!Array<!proto.position>} value
 * @return {!proto.req_task_info} returns this
*/
proto.req_task_info.prototype.setTaskAreaInfoList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.position=} opt_value
 * @param {number=} opt_index
 * @return {!proto.position}
 */
proto.req_task_info.prototype.addTaskAreaInfo = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.position, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.req_task_info} returns this
 */
proto.req_task_info.prototype.clearTaskAreaInfoList = function () {
  return this.setTaskAreaInfoList([]);
};


/**
 * repeated equipment_info equipments_our = 8;
 * @return {!Array<!proto.equipment_info>}
 */
proto.req_task_info.prototype.getEquipmentsOurList = function () {
  return /** @type{!Array<!proto.equipment_info>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.equipment_info, 8));
};


/**
 * @param {!Array<!proto.equipment_info>} value
 * @return {!proto.req_task_info} returns this
*/
proto.req_task_info.prototype.setEquipmentsOurList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.equipment_info=} opt_value
 * @param {number=} opt_index
 * @return {!proto.equipment_info}
 */
proto.req_task_info.prototype.addEquipmentsOur = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.equipment_info, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.req_task_info} returns this
 */
proto.req_task_info.prototype.clearEquipmentsOurList = function () {
  return this.setEquipmentsOurList([]);
};


/**
 * repeated equipment_info equipments_enemy = 9;
 * @return {!Array<!proto.equipment_info>}
 */
proto.req_task_info.prototype.getEquipmentsEnemyList = function () {
  return /** @type{!Array<!proto.equipment_info>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.equipment_info, 9));
};


/**
 * @param {!Array<!proto.equipment_info>} value
 * @return {!proto.req_task_info} returns this
*/
proto.req_task_info.prototype.setEquipmentsEnemyList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.equipment_info=} opt_value
 * @param {number=} opt_index
 * @return {!proto.equipment_info}
 */
proto.req_task_info.prototype.addEquipmentsEnemy = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.equipment_info, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.req_task_info} returns this
 */
proto.req_task_info.prototype.clearEquipmentsEnemyList = function () {
  return this.setEquipmentsEnemyList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.req_task_info_doc.prototype.toObject = function (opt_includeInstance) {
    return proto.req_task_info_doc.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.req_task_info_doc} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.req_task_info_doc.toObject = function (includeInstance, msg) {
    var f, obj = {
      taskInfoDoc: msg.getTaskInfoDoc_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.req_task_info_doc}
 */
proto.req_task_info_doc.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.req_task_info_doc;
  return proto.req_task_info_doc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.req_task_info_doc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.req_task_info_doc}
 */
proto.req_task_info_doc.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setTaskInfoDoc(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.req_task_info_doc.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.req_task_info_doc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.req_task_info_doc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.req_task_info_doc.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTaskInfoDoc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes task_info_doc = 1;
 * @return {!(string|Uint8Array)}
 */
proto.req_task_info_doc.prototype.getTaskInfoDoc = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes task_info_doc = 1;
 * This is a type-conversion wrapper around `getTaskInfoDoc()`
 * @return {string}
 */
proto.req_task_info_doc.prototype.getTaskInfoDoc_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getTaskInfoDoc()));
};


/**
 * optional bytes task_info_doc = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTaskInfoDoc()`
 * @return {!Uint8Array}
 */
proto.req_task_info_doc.prototype.getTaskInfoDoc_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getTaskInfoDoc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.req_task_info_doc} returns this
 */
proto.req_task_info_doc.prototype.setTaskInfoDoc = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ack_task_done.prototype.toObject = function (opt_includeInstance) {
    return proto.ack_task_done.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ack_task_done} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ack_task_done.toObject = function (includeInstance, msg) {
    var f, obj = {
      timeCost: jspb.Message.getFieldWithDefault(msg, 1, 0),
      countCoa: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ack_task_done}
 */
proto.ack_task_done.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ack_task_done;
  return proto.ack_task_done.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ack_task_done} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ack_task_done}
 */
proto.ack_task_done.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTimeCost(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCountCoa(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ack_task_done.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.ack_task_done.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ack_task_done} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ack_task_done.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTimeCost();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCountCoa();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 time_cost = 1;
 * @return {number}
 */
proto.ack_task_done.prototype.getTimeCost = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ack_task_done} returns this
 */
proto.ack_task_done.prototype.setTimeCost = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 count_coa = 2;
 * @return {number}
 */
proto.ack_task_done.prototype.getCountCoa = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ack_task_done} returns this
 */
proto.ack_task_done.prototype.setCountCoa = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.req_coa_list.prototype.toObject = function (opt_includeInstance) {
    return proto.req_coa_list.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.req_coa_list} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.req_coa_list.toObject = function (includeInstance, msg) {
    var f, obj = {
      taskId: jspb.Message.getFieldWithDefault(msg, 1, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.req_coa_list}
 */
proto.req_coa_list.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.req_coa_list;
  return proto.req_coa_list.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.req_coa_list} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.req_coa_list}
 */
proto.req_coa_list.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTaskId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.req_coa_list.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.req_coa_list.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.req_coa_list} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.req_coa_list.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTaskId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 task_id = 1;
 * @return {number}
 */
proto.req_coa_list.prototype.getTaskId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_coa_list} returns this
 */
proto.req_coa_list.prototype.setTaskId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ack_coa_list.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ack_coa_list.prototype.toObject = function (opt_includeInstance) {
    return proto.ack_coa_list.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ack_coa_list} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ack_coa_list.toObject = function (includeInstance, msg) {
    var f, obj = {
      taskId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      coaIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ack_coa_list}
 */
proto.ack_coa_list.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ack_coa_list;
  return proto.ack_coa_list.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ack_coa_list} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ack_coa_list}
 */
proto.ack_coa_list.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTaskId(value);
        break;
      case 2:
        var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
        for (var i = 0; i < values.length; i++) {
          msg.addCoaIds(values[i]);
        }
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ack_coa_list.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.ack_coa_list.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ack_coa_list} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ack_coa_list.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTaskId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCoaIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 task_id = 1;
 * @return {number}
 */
proto.ack_coa_list.prototype.getTaskId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ack_coa_list} returns this
 */
proto.ack_coa_list.prototype.setTaskId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated uint32 coa_ids = 2;
 * @return {!Array<number>}
 */
proto.ack_coa_list.prototype.getCoaIdsList = function () {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ack_coa_list} returns this
 */
proto.ack_coa_list.prototype.setCoaIdsList = function (value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ack_coa_list} returns this
 */
proto.ack_coa_list.prototype.addCoaIds = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ack_coa_list} returns this
 */
proto.ack_coa_list.prototype.clearCoaIdsList = function () {
  return this.setCoaIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.req_opt_coa.prototype.toObject = function (opt_includeInstance) {
    return proto.req_opt_coa.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.req_opt_coa} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.req_opt_coa.toObject = function (includeInstance, msg) {
    var f, obj = {
      taskId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      coaId: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.req_opt_coa}
 */
proto.req_opt_coa.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.req_opt_coa;
  return proto.req_opt_coa.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.req_opt_coa} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.req_opt_coa}
 */
proto.req_opt_coa.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTaskId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCoaId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.req_opt_coa.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.req_opt_coa.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.req_opt_coa} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.req_opt_coa.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTaskId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCoaId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 task_id = 1;
 * @return {number}
 */
proto.req_opt_coa.prototype.getTaskId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_opt_coa} returns this
 */
proto.req_opt_coa.prototype.setTaskId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 coa_id = 2;
 * @return {number}
 */
proto.req_opt_coa.prototype.getCoaId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_opt_coa} returns this
 */
proto.req_opt_coa.prototype.setCoaId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.req_coa_net.prototype.toObject = function (opt_includeInstance) {
    return proto.req_coa_net.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.req_coa_net} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.req_coa_net.toObject = function (includeInstance, msg) {
    var f, obj = {
      coaId: jspb.Message.getFieldWithDefault(msg, 1, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.req_coa_net}
 */
proto.req_coa_net.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.req_coa_net;
  return proto.req_coa_net.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.req_coa_net} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.req_coa_net}
 */
proto.req_coa_net.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCoaId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.req_coa_net.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.req_coa_net.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.req_coa_net} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.req_coa_net.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCoaId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 coa_id = 1;
 * @return {number}
 */
proto.req_coa_net.prototype.getCoaId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_coa_net} returns this
 */
proto.req_coa_net.prototype.setCoaId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ack_coa_net.repeatedFields_ = [2, 3];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ack_coa_net.prototype.toObject = function (opt_includeInstance) {
    return proto.ack_coa_net.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ack_coa_net} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ack_coa_net.toObject = function (includeInstance, msg) {
    var f, obj = {
      coaId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      actionsList: jspb.Message.toObjectList(msg.getActionsList(),
        proto.action_info.toObject, includeInstance),
      edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
        proto.action_serial.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ack_coa_net}
 */
proto.ack_coa_net.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ack_coa_net;
  return proto.ack_coa_net.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ack_coa_net} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ack_coa_net}
 */
proto.ack_coa_net.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCoaId(value);
        break;
      case 2:
        var value = new proto.action_info;
        reader.readMessage(value, proto.action_info.deserializeBinaryFromReader);
        msg.addActions(value);
        break;
      case 3:
        var value = new proto.action_serial;
        reader.readMessage(value, proto.action_serial.deserializeBinaryFromReader);
        msg.addEdges(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ack_coa_net.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.ack_coa_net.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ack_coa_net} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ack_coa_net.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCoaId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.action_info.serializeBinaryToWriter
    );
  }
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.action_serial.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 coa_id = 1;
 * @return {number}
 */
proto.ack_coa_net.prototype.getCoaId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ack_coa_net} returns this
 */
proto.ack_coa_net.prototype.setCoaId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated action_info actions = 2;
 * @return {!Array<!proto.action_info>}
 */
proto.ack_coa_net.prototype.getActionsList = function () {
  return /** @type{!Array<!proto.action_info>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.action_info, 2));
};


/**
 * @param {!Array<!proto.action_info>} value
 * @return {!proto.ack_coa_net} returns this
*/
proto.ack_coa_net.prototype.setActionsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.action_info=} opt_value
 * @param {number=} opt_index
 * @return {!proto.action_info}
 */
proto.ack_coa_net.prototype.addActions = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.action_info, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ack_coa_net} returns this
 */
proto.ack_coa_net.prototype.clearActionsList = function () {
  return this.setActionsList([]);
};


/**
 * repeated action_serial edges = 3;
 * @return {!Array<!proto.action_serial>}
 */
proto.ack_coa_net.prototype.getEdgesList = function () {
  return /** @type{!Array<!proto.action_serial>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.action_serial, 3));
};


/**
 * @param {!Array<!proto.action_serial>} value
 * @return {!proto.ack_coa_net} returns this
*/
proto.ack_coa_net.prototype.setEdgesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.action_serial=} opt_value
 * @param {number=} opt_index
 * @return {!proto.action_serial}
 */
proto.ack_coa_net.prototype.addEdges = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.action_serial, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ack_coa_net} returns this
 */
proto.ack_coa_net.prototype.clearEdgesList = function () {
  return this.setEdgesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.req_coa_eva.prototype.toObject = function (opt_includeInstance) {
    return proto.req_coa_eva.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.req_coa_eva} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.req_coa_eva.toObject = function (includeInstance, msg) {
    var f, obj = {
      coaId: jspb.Message.getFieldWithDefault(msg, 1, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.req_coa_eva}
 */
proto.req_coa_eva.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.req_coa_eva;
  return proto.req_coa_eva.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.req_coa_eva} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.req_coa_eva}
 */
proto.req_coa_eva.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCoaId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.req_coa_eva.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.req_coa_eva.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.req_coa_eva} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.req_coa_eva.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCoaId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 coa_id = 1;
 * @return {number}
 */
proto.req_coa_eva.prototype.getCoaId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_coa_eva} returns this
 */
proto.req_coa_eva.prototype.setCoaId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ack_coa_eva.prototype.toObject = function (opt_includeInstance) {
    return proto.ack_coa_eva.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ack_coa_eva} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ack_coa_eva.toObject = function (includeInstance, msg) {
    var f, obj = {
      coaId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      evaRst: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ack_coa_eva}
 */
proto.ack_coa_eva.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ack_coa_eva;
  return proto.ack_coa_eva.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ack_coa_eva} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ack_coa_eva}
 */
proto.ack_coa_eva.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCoaId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setEvaRst(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ack_coa_eva.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.ack_coa_eva.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ack_coa_eva} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ack_coa_eva.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCoaId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEvaRst();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 coa_id = 1;
 * @return {number}
 */
proto.ack_coa_eva.prototype.getCoaId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ack_coa_eva} returns this
 */
proto.ack_coa_eva.prototype.setCoaId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 eva_rst = 2;
 * @return {number}
 */
proto.ack_coa_eva.prototype.getEvaRst = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ack_coa_eva} returns this
 */
proto.ack_coa_eva.prototype.setEvaRst = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.req_coa_classify.prototype.toObject = function (opt_includeInstance) {
    return proto.req_coa_classify.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.req_coa_classify} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.req_coa_classify.toObject = function (includeInstance, msg) {
    var f, obj = {
      coaId: jspb.Message.getFieldWithDefault(msg, 1, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.req_coa_classify}
 */
proto.req_coa_classify.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.req_coa_classify;
  return proto.req_coa_classify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.req_coa_classify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.req_coa_classify}
 */
proto.req_coa_classify.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCoaId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.req_coa_classify.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.req_coa_classify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.req_coa_classify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.req_coa_classify.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCoaId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 coa_id = 1;
 * @return {number}
 */
proto.req_coa_classify.prototype.getCoaId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_coa_classify} returns this
 */
proto.req_coa_classify.prototype.setCoaId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ack_coa_classify.prototype.toObject = function (opt_includeInstance) {
    return proto.ack_coa_classify.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ack_coa_classify} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ack_coa_classify.toObject = function (includeInstance, msg) {
    var f, obj = {
      coaId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      eclassifyRst: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ack_coa_classify}
 */
proto.ack_coa_classify.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ack_coa_classify;
  return proto.ack_coa_classify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ack_coa_classify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ack_coa_classify}
 */
proto.ack_coa_classify.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCoaId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setEclassifyRst(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ack_coa_classify.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.ack_coa_classify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ack_coa_classify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ack_coa_classify.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCoaId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEclassifyRst();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 coa_id = 1;
 * @return {number}
 */
proto.ack_coa_classify.prototype.getCoaId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ack_coa_classify} returns this
 */
proto.ack_coa_classify.prototype.setCoaId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 eclassify_rst = 2;
 * @return {number}
 */
proto.ack_coa_classify.prototype.getEclassifyRst = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ack_coa_classify} returns this
 */
proto.ack_coa_classify.prototype.setEclassifyRst = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.req_coa_opt.prototype.toObject = function (opt_includeInstance) {
    return proto.req_coa_opt.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.req_coa_opt} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.req_coa_opt.toObject = function (includeInstance, msg) {
    var f, obj = {
      coaId: jspb.Message.getFieldWithDefault(msg, 1, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.req_coa_opt}
 */
proto.req_coa_opt.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.req_coa_opt;
  return proto.req_coa_opt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.req_coa_opt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.req_coa_opt}
 */
proto.req_coa_opt.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCoaId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.req_coa_opt.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.req_coa_opt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.req_coa_opt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.req_coa_opt.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCoaId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 coa_id = 1;
 * @return {number}
 */
proto.req_coa_opt.prototype.getCoaId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_coa_opt} returns this
 */
proto.req_coa_opt.prototype.setCoaId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ack_coa_opt.repeatedFields_ = [2, 3];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ack_coa_opt.prototype.toObject = function (opt_includeInstance) {
    return proto.ack_coa_opt.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ack_coa_opt} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ack_coa_opt.toObject = function (includeInstance, msg) {
    var f, obj = {
      coaId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      actionsList: jspb.Message.toObjectList(msg.getActionsList(),
        proto.action_info.toObject, includeInstance),
      edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
        proto.action_serial.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ack_coa_opt}
 */
proto.ack_coa_opt.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ack_coa_opt;
  return proto.ack_coa_opt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ack_coa_opt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ack_coa_opt}
 */
proto.ack_coa_opt.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCoaId(value);
        break;
      case 2:
        var value = new proto.action_info;
        reader.readMessage(value, proto.action_info.deserializeBinaryFromReader);
        msg.addActions(value);
        break;
      case 3:
        var value = new proto.action_serial;
        reader.readMessage(value, proto.action_serial.deserializeBinaryFromReader);
        msg.addEdges(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ack_coa_opt.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.ack_coa_opt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ack_coa_opt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ack_coa_opt.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCoaId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.action_info.serializeBinaryToWriter
    );
  }
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.action_serial.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 coa_id = 1;
 * @return {number}
 */
proto.ack_coa_opt.prototype.getCoaId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ack_coa_opt} returns this
 */
proto.ack_coa_opt.prototype.setCoaId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated action_info actions = 2;
 * @return {!Array<!proto.action_info>}
 */
proto.ack_coa_opt.prototype.getActionsList = function () {
  return /** @type{!Array<!proto.action_info>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.action_info, 2));
};


/**
 * @param {!Array<!proto.action_info>} value
 * @return {!proto.ack_coa_opt} returns this
*/
proto.ack_coa_opt.prototype.setActionsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.action_info=} opt_value
 * @param {number=} opt_index
 * @return {!proto.action_info}
 */
proto.ack_coa_opt.prototype.addActions = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.action_info, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ack_coa_opt} returns this
 */
proto.ack_coa_opt.prototype.clearActionsList = function () {
  return this.setActionsList([]);
};


/**
 * repeated action_serial edges = 3;
 * @return {!Array<!proto.action_serial>}
 */
proto.ack_coa_opt.prototype.getEdgesList = function () {
  return /** @type{!Array<!proto.action_serial>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.action_serial, 3));
};


/**
 * @param {!Array<!proto.action_serial>} value
 * @return {!proto.ack_coa_opt} returns this
*/
proto.ack_coa_opt.prototype.setEdgesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.action_serial=} opt_value
 * @param {number=} opt_index
 * @return {!proto.action_serial}
 */
proto.ack_coa_opt.prototype.addEdges = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.action_serial, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ack_coa_opt} returns this
 */
proto.ack_coa_opt.prototype.clearEdgesList = function () {
  return this.setEdgesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pc_heart_beat.prototype.toObject = function (opt_includeInstance) {
    return proto.pc_heart_beat.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pc_heart_beat} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pc_heart_beat.toObject = function (includeInstance, msg) {
    var f, obj = {
      busyness: jspb.Message.getFieldWithDefault(msg, 1, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pc_heart_beat}
 */
proto.pc_heart_beat.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pc_heart_beat;
  return proto.pc_heart_beat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pc_heart_beat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pc_heart_beat}
 */
proto.pc_heart_beat.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setBusyness(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pc_heart_beat.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pc_heart_beat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pc_heart_beat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pc_heart_beat.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBusyness();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 busyness = 1;
 * @return {number}
 */
proto.pc_heart_beat.prototype.getBusyness = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pc_heart_beat} returns this
 */
proto.pc_heart_beat.prototype.setBusyness = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.db_general_table.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.db_general_table.prototype.toObject = function (opt_includeInstance) {
    return proto.db_general_table.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.db_general_table} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.db_general_table.toObject = function (includeInstance, msg) {
    var f, obj = {
      dataSourceId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      dataRowList: jspb.Message.toObjectList(msg.getDataRowList(),
        proto.db_general_row.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db_general_table}
 */
proto.db_general_table.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.db_general_table;
  return proto.db_general_table.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db_general_table} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db_general_table}
 */
proto.db_general_table.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setDataSourceId(value);
        break;
      case 2:
        var value = new proto.db_general_row;
        reader.readMessage(value, proto.db_general_row.deserializeBinaryFromReader);
        msg.addDataRow(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db_general_table.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.db_general_table.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db_general_table} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db_general_table.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getDataSourceId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDataRowList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.db_general_row.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 data_source_id = 1;
 * @return {number}
 */
proto.db_general_table.prototype.getDataSourceId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.db_general_table} returns this
 */
proto.db_general_table.prototype.setDataSourceId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated db_general_row data_row = 2;
 * @return {!Array<!proto.db_general_row>}
 */
proto.db_general_table.prototype.getDataRowList = function () {
  return /** @type{!Array<!proto.db_general_row>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.db_general_row, 2));
};


/**
 * @param {!Array<!proto.db_general_row>} value
 * @return {!proto.db_general_table} returns this
*/
proto.db_general_table.prototype.setDataRowList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.db_general_row=} opt_value
 * @param {number=} opt_index
 * @return {!proto.db_general_row}
 */
proto.db_general_table.prototype.addDataRow = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.db_general_row, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.db_general_table} returns this
 */
proto.db_general_table.prototype.clearDataRowList = function () {
  return this.setDataRowList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.db_general_row.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.db_general_row.prototype.toObject = function (opt_includeInstance) {
    return proto.db_general_row.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.db_general_row} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.db_general_row.toObject = function (includeInstance, msg) {
    var f, obj = {
      valueList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db_general_row}
 */
proto.db_general_row.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.db_general_row;
  return proto.db_general_row.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db_general_row} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db_general_row}
 */
proto.db_general_row.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.addValue(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db_general_row.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.db_general_row.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db_general_row} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db_general_row.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string value = 1;
 * @return {!Array<string>}
 */
proto.db_general_row.prototype.getValueList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.db_general_row} returns this
 */
proto.db_general_row.prototype.setValueList = function (value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.db_general_row} returns this
 */
proto.db_general_row.prototype.addValue = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.db_general_row} returns this
 */
proto.db_general_row.prototype.clearValueList = function () {
  return this.setValueList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.req_db_general.prototype.toObject = function (opt_includeInstance) {
    return proto.req_db_general.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.req_db_general} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.req_db_general.toObject = function (includeInstance, msg) {
    var f, obj = {
      dataSourceId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      params: jspb.Message.getFieldWithDefault(msg, 2, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.req_db_general}
 */
proto.req_db_general.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.req_db_general;
  return proto.req_db_general.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.req_db_general} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.req_db_general}
 */
proto.req_db_general.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setDataSourceId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setParams(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.req_db_general.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.req_db_general.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.req_db_general} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.req_db_general.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getDataSourceId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getParams();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 data_source_id = 1;
 * @return {number}
 */
proto.req_db_general.prototype.getDataSourceId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.req_db_general} returns this
 */
proto.req_db_general.prototype.setDataSourceId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string params = 2;
 * @return {string}
 */
proto.req_db_general.prototype.getParams = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.req_db_general} returns this
 */
proto.req_db_general.prototype.setParams = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.equipment_info.prototype.toObject = function (opt_includeInstance) {
    return proto.equipment_info.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.equipment_info} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.equipment_info.toObject = function (includeInstance, msg) {
    var f, obj = {
      equipmentModelId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      pos: (f = msg.getPos()) && proto.position.toObject(includeInstance, f),
      equipResourse: jspb.Message.getFieldWithDefault(msg, 3, ""),
      equipWeapon: jspb.Message.getFieldWithDefault(msg, 4, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.equipment_info}
 */
proto.equipment_info.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.equipment_info;
  return proto.equipment_info.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.equipment_info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.equipment_info}
 */
proto.equipment_info.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setEquipmentModelId(value);
        break;
      case 2:
        var value = new proto.position;
        reader.readMessage(value, proto.position.deserializeBinaryFromReader);
        msg.setPos(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setEquipResourse(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setEquipWeapon(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.equipment_info.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.equipment_info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.equipment_info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.equipment_info.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEquipmentModelId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPos();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.position.serializeBinaryToWriter
    );
  }
  f = message.getEquipResourse();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEquipWeapon();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 equipment_model_id = 1;
 * @return {number}
 */
proto.equipment_info.prototype.getEquipmentModelId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.equipment_info} returns this
 */
proto.equipment_info.prototype.setEquipmentModelId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional position pos = 2;
 * @return {?proto.position}
 */
proto.equipment_info.prototype.getPos = function () {
  return /** @type{?proto.position} */ (
    jspb.Message.getWrapperField(this, proto.position, 2));
};


/**
 * @param {?proto.position|undefined} value
 * @return {!proto.equipment_info} returns this
*/
proto.equipment_info.prototype.setPos = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.equipment_info} returns this
 */
proto.equipment_info.prototype.clearPos = function () {
  return this.setPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.equipment_info.prototype.hasPos = function () {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string equip_resourse = 3;
 * @return {string}
 */
proto.equipment_info.prototype.getEquipResourse = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.equipment_info} returns this
 */
proto.equipment_info.prototype.setEquipResourse = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string equip_weapon = 4;
 * @return {string}
 */
proto.equipment_info.prototype.getEquipWeapon = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.equipment_info} returns this
 */
proto.equipment_info.prototype.setEquipWeapon = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.action_info.prototype.toObject = function (opt_includeInstance) {
    return proto.action_info.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.action_info} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.action_info.toObject = function (includeInstance, msg) {
    var f, obj = {
      actionEntityId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      actionModelId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      actionName: jspb.Message.getFieldWithDefault(msg, 3, ""),
      hostEquipId: jspb.Message.getFieldWithDefault(msg, 4, 0),
      hostEquipName: jspb.Message.getFieldWithDefault(msg, 5, ""),
      targetEquipId: jspb.Message.getFieldWithDefault(msg, 6, 0),
      targetEquipName: jspb.Message.getFieldWithDefault(msg, 7, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.action_info}
 */
proto.action_info.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.action_info;
  return proto.action_info.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.action_info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.action_info}
 */
proto.action_info.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setActionEntityId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setActionModelId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setActionName(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setHostEquipId(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setHostEquipName(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTargetEquipId(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setTargetEquipName(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.action_info.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.action_info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.action_info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.action_info.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getActionEntityId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getActionModelId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getActionName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHostEquipId();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getHostEquipName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTargetEquipId();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getTargetEquipName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional uint32 action_entity_id = 1;
 * @return {number}
 */
proto.action_info.prototype.getActionEntityId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.action_info} returns this
 */
proto.action_info.prototype.setActionEntityId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 action_model_id = 2;
 * @return {number}
 */
proto.action_info.prototype.getActionModelId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.action_info} returns this
 */
proto.action_info.prototype.setActionModelId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string action_name = 3;
 * @return {string}
 */
proto.action_info.prototype.getActionName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.action_info} returns this
 */
proto.action_info.prototype.setActionName = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 host_equip_id = 4;
 * @return {number}
 */
proto.action_info.prototype.getHostEquipId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.action_info} returns this
 */
proto.action_info.prototype.setHostEquipId = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string host_equip_name = 5;
 * @return {string}
 */
proto.action_info.prototype.getHostEquipName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.action_info} returns this
 */
proto.action_info.prototype.setHostEquipName = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 target_equip_id = 6;
 * @return {number}
 */
proto.action_info.prototype.getTargetEquipId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.action_info} returns this
 */
proto.action_info.prototype.setTargetEquipId = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string target_equip_name = 7;
 * @return {string}
 */
proto.action_info.prototype.getTargetEquipName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.action_info} returns this
 */
proto.action_info.prototype.setTargetEquipName = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.action_serial.prototype.toObject = function (opt_includeInstance) {
    return proto.action_serial.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.action_serial} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.action_serial.toObject = function (includeInstance, msg) {
    var f, obj = {
      startActionId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      endActionId: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.action_serial}
 */
proto.action_serial.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.action_serial;
  return proto.action_serial.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.action_serial} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.action_serial}
 */
proto.action_serial.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setStartActionId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setEndActionId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.action_serial.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.action_serial.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.action_serial} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.action_serial.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStartActionId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEndActionId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 start_action_id = 1;
 * @return {number}
 */
proto.action_serial.prototype.getStartActionId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.action_serial} returns this
 */
proto.action_serial.prototype.setStartActionId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 end_action_id = 2;
 * @return {number}
 */
proto.action_serial.prototype.getEndActionId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.action_serial} returns this
 */
proto.action_serial.prototype.setEndActionId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.position.prototype.toObject = function (opt_includeInstance) {
    return proto.position.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.position} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.position.toObject = function (includeInstance, msg) {
    var f, obj = {
      latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
      longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.position}
 */
proto.position.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.position;
  return proto.position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.position}
 */
proto.position.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setLatitude(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setLongitude(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.position.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.position.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double latitude = 1;
 * @return {number}
 */
proto.position.prototype.getLatitude = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.position} returns this
 */
proto.position.prototype.setLatitude = function (value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double longitude = 2;
 * @return {number}
 */
proto.position.prototype.getLongitude = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.position} returns this
 */
proto.position.prototype.setLongitude = function (value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pc_id_start.prototype.toObject = function (opt_includeInstance) {
    return proto.pc_id_start.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pc_id_start} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pc_id_start.toObject = function (includeInstance, msg) {
    var f, obj = {
      startIndex: jspb.Message.getFieldWithDefault(msg, 1, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pc_id_start}
 */
proto.pc_id_start.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pc_id_start;
  return proto.pc_id_start.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pc_id_start} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pc_id_start}
 */
proto.pc_id_start.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setStartIndex(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pc_id_start.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pc_id_start.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pc_id_start} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pc_id_start.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStartIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 start_index = 1;
 * @return {number}
 */
proto.pc_id_start.prototype.getStartIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pc_id_start} returns this
 */
proto.pc_id_start.prototype.setStartIndex = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pc_id_table.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pc_id_table.prototype.toObject = function (opt_includeInstance) {
    return proto.pc_id_table.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pc_id_table} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pc_id_table.toObject = function (includeInstance, msg) {
    var f, obj = {
      startIndexList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pc_id_table}
 */
proto.pc_id_table.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pc_id_table;
  return proto.pc_id_table.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pc_id_table} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pc_id_table}
 */
proto.pc_id_table.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
        for (var i = 0; i < values.length; i++) {
          msg.addStartIndex(values[i]);
        }
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pc_id_table.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pc_id_table.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pc_id_table} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pc_id_table.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStartIndexList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 start_index = 1;
 * @return {!Array<number>}
 */
proto.pc_id_table.prototype.getStartIndexList = function () {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.pc_id_table} returns this
 */
proto.pc_id_table.prototype.setStartIndexList = function (value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.pc_id_table} returns this
 */
proto.pc_id_table.prototype.addStartIndex = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pc_id_table} returns this
 */
proto.pc_id_table.prototype.clearStartIndexList = function () {
  return this.setStartIndexList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pc_nodes_managed.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pc_nodes_managed.prototype.toObject = function (opt_includeInstance) {
    return proto.pc_nodes_managed.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pc_nodes_managed} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pc_nodes_managed.toObject = function (includeInstance, msg) {
    var f, obj = {
      nodesInfoList: jspb.Message.toObjectList(msg.getNodesInfoList(),
        proto.node_info.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pc_nodes_managed}
 */
proto.pc_nodes_managed.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pc_nodes_managed;
  return proto.pc_nodes_managed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pc_nodes_managed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pc_nodes_managed}
 */
proto.pc_nodes_managed.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.node_info;
        reader.readMessage(value, proto.node_info.deserializeBinaryFromReader);
        msg.addNodesInfo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pc_nodes_managed.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pc_nodes_managed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pc_nodes_managed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pc_nodes_managed.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getNodesInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.node_info.serializeBinaryToWriter
    );
  }
};


/**
 * repeated node_info nodes_info = 1;
 * @return {!Array<!proto.node_info>}
 */
proto.pc_nodes_managed.prototype.getNodesInfoList = function () {
  return /** @type{!Array<!proto.node_info>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.node_info, 1));
};


/**
 * @param {!Array<!proto.node_info>} value
 * @return {!proto.pc_nodes_managed} returns this
*/
proto.pc_nodes_managed.prototype.setNodesInfoList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.node_info=} opt_value
 * @param {number=} opt_index
 * @return {!proto.node_info}
 */
proto.pc_nodes_managed.prototype.addNodesInfo = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.node_info, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pc_nodes_managed} returns this
 */
proto.pc_nodes_managed.prototype.clearNodesInfoList = function () {
  return this.setNodesInfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pc_entity_register.prototype.toObject = function (opt_includeInstance) {
    return proto.pc_entity_register.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pc_entity_register} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pc_entity_register.toObject = function (includeInstance, msg) {
    var f, obj = {
      subscribeTable: msg.getSubscribeTable_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pc_entity_register}
 */
proto.pc_entity_register.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pc_entity_register;
  return proto.pc_entity_register.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pc_entity_register} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pc_entity_register}
 */
proto.pc_entity_register.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSubscribeTable(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pc_entity_register.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pc_entity_register.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pc_entity_register} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pc_entity_register.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSubscribeTable_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes subscribe_table = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pc_entity_register.prototype.getSubscribeTable = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes subscribe_table = 1;
 * This is a type-conversion wrapper around `getSubscribeTable()`
 * @return {string}
 */
proto.pc_entity_register.prototype.getSubscribeTable_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getSubscribeTable()));
};


/**
 * optional bytes subscribe_table = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubscribeTable()`
 * @return {!Uint8Array}
 */
proto.pc_entity_register.prototype.getSubscribeTable_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getSubscribeTable()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pc_entity_register} returns this
 */
proto.pc_entity_register.prototype.setSubscribeTable = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pc_subscribe_update.prototype.toObject = function (opt_includeInstance) {
    return proto.pc_subscribe_update.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pc_subscribe_update} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pc_subscribe_update.toObject = function (includeInstance, msg) {
    var f, obj = {
      subscribeTable: msg.getSubscribeTable_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pc_subscribe_update}
 */
proto.pc_subscribe_update.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pc_subscribe_update;
  return proto.pc_subscribe_update.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pc_subscribe_update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pc_subscribe_update}
 */
proto.pc_subscribe_update.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSubscribeTable(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pc_subscribe_update.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pc_subscribe_update.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pc_subscribe_update} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pc_subscribe_update.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSubscribeTable_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes subscribe_table = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pc_subscribe_update.prototype.getSubscribeTable = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes subscribe_table = 1;
 * This is a type-conversion wrapper around `getSubscribeTable()`
 * @return {string}
 */
proto.pc_subscribe_update.prototype.getSubscribeTable_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getSubscribeTable()));
};


/**
 * optional bytes subscribe_table = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubscribeTable()`
 * @return {!Uint8Array}
 */
proto.pc_subscribe_update.prototype.getSubscribeTable_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getSubscribeTable()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pc_subscribe_update} returns this
 */
proto.pc_subscribe_update.prototype.setSubscribeTable = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pc_topology_update.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pc_topology_update.prototype.toObject = function (opt_includeInstance) {
    return proto.pc_topology_update.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pc_topology_update} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pc_topology_update.toObject = function (includeInstance, msg) {
    var f, obj = {
      statisticList: jspb.Message.toObjectList(msg.getStatisticList(),
        proto.entity_statistic.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pc_topology_update}
 */
proto.pc_topology_update.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pc_topology_update;
  return proto.pc_topology_update.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pc_topology_update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pc_topology_update}
 */
proto.pc_topology_update.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.entity_statistic;
        reader.readMessage(value, proto.entity_statistic.deserializeBinaryFromReader);
        msg.addStatistic(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pc_topology_update.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pc_topology_update.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pc_topology_update} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pc_topology_update.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStatisticList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.entity_statistic.serializeBinaryToWriter
    );
  }
};


/**
 * repeated entity_statistic statistic = 1;
 * @return {!Array<!proto.entity_statistic>}
 */
proto.pc_topology_update.prototype.getStatisticList = function () {
  return /** @type{!Array<!proto.entity_statistic>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.entity_statistic, 1));
};


/**
 * @param {!Array<!proto.entity_statistic>} value
 * @return {!proto.pc_topology_update} returns this
*/
proto.pc_topology_update.prototype.setStatisticList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.entity_statistic=} opt_value
 * @param {number=} opt_index
 * @return {!proto.entity_statistic}
 */
proto.pc_topology_update.prototype.addStatistic = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.entity_statistic, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pc_topology_update} returns this
 */
proto.pc_topology_update.prototype.clearStatisticList = function () {
  return this.setStatisticList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pc_logon_request.prototype.toObject = function (opt_includeInstance) {
    return proto.pc_logon_request.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pc_logon_request} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pc_logon_request.toObject = function (includeInstance, msg) {
    var f, obj = {
      username: jspb.Message.getFieldWithDefault(msg, 1, ""),
      password: jspb.Message.getFieldWithDefault(msg, 2, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pc_logon_request}
 */
proto.pc_logon_request.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pc_logon_request;
  return proto.pc_logon_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pc_logon_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pc_logon_request}
 */
proto.pc_logon_request.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUsername(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPassword(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pc_logon_request.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pc_logon_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pc_logon_request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pc_logon_request.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.pc_logon_request.prototype.getUsername = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pc_logon_request} returns this
 */
proto.pc_logon_request.prototype.setUsername = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.pc_logon_request.prototype.getPassword = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pc_logon_request} returns this
 */
proto.pc_logon_request.prototype.setPassword = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pc_logon_asw.prototype.toObject = function (opt_includeInstance) {
    return proto.pc_logon_asw.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pc_logon_asw} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pc_logon_asw.toObject = function (includeInstance, msg) {
    var f, obj = {
      rst: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
      id: jspb.Message.getFieldWithDefault(msg, 2, 0),
      token: msg.getToken_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pc_logon_asw}
 */
proto.pc_logon_asw.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pc_logon_asw;
  return proto.pc_logon_asw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pc_logon_asw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pc_logon_asw}
 */
proto.pc_logon_asw.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setRst(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setId(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pc_logon_asw.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pc_logon_asw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pc_logon_asw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pc_logon_asw.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getRst();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getToken_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bool rst = 1;
 * @return {boolean}
 */
proto.pc_logon_asw.prototype.getRst = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pc_logon_asw} returns this
 */
proto.pc_logon_asw.prototype.setRst = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 id = 2;
 * @return {number}
 */
proto.pc_logon_asw.prototype.getId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pc_logon_asw} returns this
 */
proto.pc_logon_asw.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes token = 3;
 * @return {!(string|Uint8Array)}
 */
proto.pc_logon_asw.prototype.getToken = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes token = 3;
 * This is a type-conversion wrapper around `getToken()`
 * @return {string}
 */
proto.pc_logon_asw.prototype.getToken_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getToken()));
};


/**
 * optional bytes token = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToken()`
 * @return {!Uint8Array}
 */
proto.pc_logon_asw.prototype.getToken_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getToken()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pc_logon_asw} returns this
 */
proto.pc_logon_asw.prototype.setToken = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.entity_statistic.prototype.toObject = function (opt_includeInstance) {
    return proto.entity_statistic.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.entity_statistic} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.entity_statistic.toObject = function (includeInstance, msg) {
    var f, obj = {
      entityType: jspb.Message.getFieldWithDefault(msg, 1, 0),
      count: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity_statistic}
 */
proto.entity_statistic.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity_statistic;
  return proto.entity_statistic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity_statistic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity_statistic}
 */
proto.entity_statistic.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.EntityType} */ (reader.readEnum());
        msg.setEntityType(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity_statistic.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.entity_statistic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity_statistic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity_statistic.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEntityType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional EntityType entity_type = 1;
 * @return {!proto.EntityType}
 */
proto.entity_statistic.prototype.getEntityType = function () {
  return /** @type {!proto.EntityType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.EntityType} value
 * @return {!proto.entity_statistic} returns this
 */
proto.entity_statistic.prototype.setEntityType = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 count = 2;
 * @return {number}
 */
proto.entity_statistic.prototype.getCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.entity_statistic} returns this
 */
proto.entity_statistic.prototype.setCount = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.node_info.prototype.toObject = function (opt_includeInstance) {
    return proto.node_info.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.node_info} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.node_info.toObject = function (includeInstance, msg) {
    var f, obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      entityType: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.node_info}
 */
proto.node_info.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.node_info;
  return proto.node_info.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.node_info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.node_info}
 */
proto.node_info.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {!proto.EntityType} */ (reader.readEnum());
        msg.setEntityType(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.node_info.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.node_info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.node_info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.node_info.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEntityType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.node_info.prototype.getId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.node_info} returns this
 */
proto.node_info.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional EntityType entity_type = 2;
 * @return {!proto.EntityType}
 */
proto.node_info.prototype.getEntityType = function () {
  return /** @type {!proto.EntityType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.EntityType} value
 * @return {!proto.node_info} returns this
 */
proto.node_info.prototype.setEntityType = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tst_positions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tst_positions.prototype.toObject = function (opt_includeInstance) {
    return proto.tst_positions.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tst_positions} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tst_positions.toObject = function (includeInstance, msg) {
    var f, obj = {
      possList: jspb.Message.toObjectList(msg.getPossList(),
        proto.position.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tst_positions}
 */
proto.tst_positions.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tst_positions;
  return proto.tst_positions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tst_positions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tst_positions}
 */
proto.tst_positions.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.position;
        reader.readMessage(value, proto.position.deserializeBinaryFromReader);
        msg.addPoss(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tst_positions.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tst_positions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tst_positions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tst_positions.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPossList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.position.serializeBinaryToWriter
    );
  }
};


/**
 * repeated position poss = 1;
 * @return {!Array<!proto.position>}
 */
proto.tst_positions.prototype.getPossList = function () {
  return /** @type{!Array<!proto.position>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.position, 1));
};


/**
 * @param {!Array<!proto.position>} value
 * @return {!proto.tst_positions} returns this
*/
proto.tst_positions.prototype.setPossList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.position=} opt_value
 * @param {number=} opt_index
 * @return {!proto.position}
 */
proto.tst_positions.prototype.addPoss = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.position, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tst_positions} returns this
 */
proto.tst_positions.prototype.clearPossList = function () {
  return this.setPossList([]);
};


/**
 * @enum {number}
 */
proto.EntityType = {
  PC_SCHEDULER: 0,
  PC_DBPROXY: 2,
  GW_WEBSOCKET: 3,
  GW_EXTAPP: 4,
  ALGO_COAGEN: 5,
  ALGO_COAEVA: 6,
  ALGO_COAOPT: 7,
  FE_BROWSER: 8,
  EX_APP: 9,
  ET_UNDEFIENED: 121
};

/**
 * @enum {number}
 */
proto.MessageType = {
  MT_UNDEFIENED: 0,
  REQ_TASKINFO: 4,
  REQ_TASKINFODOC: 5,
  ACK_TASKDONE: 6,
  REQ_COALIST: 7,
  ACK_COALIST: 8,
  REQ_OPTCOA: 9,
  REQ_COANET: 10,
  ACK_COANET: 11,
  REQ_COAEVA: 12,
  ACK_COAEVA: 13,
  REQ_COACLASSIFY: 14,
  ACK_COACLASSIFY: 15,
  REQ_COAOPT: 16,
  ACK_COAOPT: 17,
  REQ_EQUIPMODEL_INFO_ALL: 30,
  ACK_EQUIPMODEL_INFO_ALL: 31,
  REQ_EQUIPMODEL_INFO_SINGLE: 32,
  ACK_EQUIPMODEL_INFO_SINGLE: 33,
  REQ_EQUIPMODEL_INFO_UPDATE: 34,
  REQ_EQUIPMODEL_INFO_DELETE: 35,
  REQ_EQUIPMODEL_EXINFO_INSERT: 36,
  REQ_EQUIPMODEL_EXINFO_DELETE: 37,
  TST_POSITIONS: 50,
  DB_GENERAL_TABLE: 51,
  REQ_DB_GENERAL: 52,
  PC_ENTITY_REGISTER: 101,
  PC_SUBSCRIBE_UPDATE: 102,
  PC_TOPOLOGY_UPDATE: 103,
  PC_LOGON_REQUEST: 104,
  PC_LOGON_ASW: 105,
  PC_ID_START: 106,
  PC_ID_TABLE: 107,
  PC_NODES_MANAGED: 108,
  PC_HEART_BEAT: 127
};

goog.object.extend(exports, proto);
